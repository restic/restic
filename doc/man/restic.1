.nh
.TH "restic backup" "1" "Jan 2017" "generated by \fBrestic generate\fR" ""

.SH NAME
.PP
restic - Backup and restore files


.SH SYNOPSIS
.PP
\fBrestic [flags]\fP


.SH DESCRIPTION
.PP
restic is a backup program which allows saving multiple revisions of files and
directories in an encrypted repository stored on different backends.

.PP
The full documentation can be found at https://restic.readthedocs.io/ .


.SH OPTIONS
.PP
\fB--cacert\fP=[]
	\fBfile\fR to load root certificates from (default: use system certificates or $RESTIC_CACERT)

.PP
\fB--cache-dir\fP=""
	set the cache \fBdirectory\fR\&. (default: use system default cache directory)

.PP
\fB--cleanup-cache\fP[=false]
	auto remove old cache directories

.PP
\fB--compression\fP=auto
	compression mode (only available for repository format version 2), one of (auto|off|max) (default: $RESTIC_COMPRESSION)

.PP
\fB-h\fP, \fB--help\fP[=false]
	help for restic

.PP
\fB--insecure-tls\fP[=false]
	skip TLS certificate verification when connecting to the repository (insecure)

.PP
\fB--json\fP[=false]
	set output mode to JSON for commands that support it

.PP
\fB--key-hint\fP=""
	\fBkey\fR ID of key to try decrypting first (default: $RESTIC_KEY_HINT)

.PP
\fB--limit-download\fP=0
	limits downloads to a maximum \fBrate\fR in KiB/s. (default: unlimited)

.PP
\fB--limit-upload\fP=0
	limits uploads to a maximum \fBrate\fR in KiB/s. (default: unlimited)

.PP
\fB--no-cache\fP[=false]
	do not use a local cache

.PP
\fB--no-extra-verify\fP[=false]
	skip additional verification of data before upload (see documentation)

.PP
\fB--no-lock\fP[=false]
	do not lock the repository, this allows some operations on read-only repositories

.PP
\fB-o\fP, \fB--option\fP=[]
	set extended option (\fBkey=value\fR, can be specified multiple times)

.PP
\fB--pack-size\fP=0
	set target pack \fBsize\fR in MiB, created pack files may be larger (default: $RESTIC_PACK_SIZE)

.PP
\fB--password-command\fP=""
	shell \fBcommand\fR to obtain the repository password from (default: $RESTIC_PASSWORD_COMMAND)

.PP
\fB-p\fP, \fB--password-file\fP=""
	\fBfile\fR to read the repository password from (default: $RESTIC_PASSWORD_FILE)

.PP
\fB-q\fP, \fB--quiet\fP[=false]
	do not output comprehensive progress report

.PP
\fB-r\fP, \fB--repo\fP=""
	\fBrepository\fR to backup to or restore from (default: $RESTIC_REPOSITORY)

.PP
\fB--repository-file\fP=""
	\fBfile\fR to read the repository location from (default: $RESTIC_REPOSITORY_FILE)

.PP
\fB--retry-lock\fP=0s
	retry to lock the repository if it is already locked, takes a value like 5m or 2h (default: no retries)

.PP
\fB--tls-client-cert\fP=""
	path to a \fBfile\fR containing PEM encoded TLS client certificate and private key (default: $RESTIC_TLS_CLIENT_CERT)

.PP
\fB-v\fP, \fB--verbose\fP[=0]
	be verbose (specify multiple times or a level using --verbose=n``, max level/times is 2)


.SH SEE ALSO
.PP
\fBrestic-backup(1)\fP, \fBrestic-cache(1)\fP, \fBrestic-cat(1)\fP, \fBrestic-check(1)\fP, \fBrestic-copy(1)\fP, \fBrestic-diff(1)\fP, \fBrestic-dump(1)\fP, \fBrestic-find(1)\fP, \fBrestic-forget(1)\fP, \fBrestic-generate(1)\fP, \fBrestic-init(1)\fP, \fBrestic-key(1)\fP, \fBrestic-list(1)\fP, \fBrestic-ls(1)\fP, \fBrestic-migrate(1)\fP, \fBrestic-mount(1)\fP, \fBrestic-prune(1)\fP, \fBrestic-recover(1)\fP, \fBrestic-repair(1)\fP, \fBrestic-restore(1)\fP, \fBrestic-rewrite(1)\fP, \fBrestic-self-update(1)\fP, \fBrestic-snapshots(1)\fP, \fBrestic-stats(1)\fP, \fBrestic-tag(1)\fP, \fBrestic-unlock(1)\fP, \fBrestic-version(1)\fP
